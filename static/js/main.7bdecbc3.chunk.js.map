{"version":3,"sources":["context/PlaylistContext.js","components/PlaylistContent/PlayListItem.js","components/PlaylistContent/PlaylistContent.js","context/ResultContext.js","utils/apiQuery.js","components/SearchContent/Search.js","components/SearchContent/Results.js","components/SearchContent/SearchContent.js","App.js","reportWebVitals.js","index.js"],"names":["PlaylistContext","createContext","PlaylistProvider","children","useState","playlist","setPlaylist","playlistValue","addToPlaylist","item","find","m","imdbID","pastState","removeFromPlaylist","filter","Provider","value","usePlaylistContext","useContext","PlayListItem","removeItem","Title","Poster","Actors","className","src","alt","type","onClick","favColor","PlaylistContent","length","map","style","background","ResultContext","ResultProvider","resultsContent","searchResult","setSearchResult","useResultContext","axiosInstance","axios","create","baseURL","fetchApi","get","path","params","header","options","apiQuery","query","a","resp","data","error","getTitle","obj","Search","inputRef","useRef","searchTitle","text","t","onSubmit","ev","preventDefault","current","ref","name","placeholder","Results","isInPlaylist","useMemo","Error","Genre","Rated","Year","Plot","SearchContent","App","page","setPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bdecbc3.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\r\nexport const PlaylistContext = createContext({});\r\n\r\nconst PlaylistProvider = ({ children }) => {\r\n  const [playlist, setPlaylist] = useState([]);\r\n\r\n  const addToPlaylist = (item) => {\r\n    const hasItem = playlist?.find(m => m.imdbID === item.imdbID)\r\n    if (!hasItem) setPlaylist(pastState => [...pastState, item])\r\n  }\r\n\r\n  const removeFromPlaylist = (item) => {\r\n    setPlaylist(pastState => pastState.filter(m => m?.imdbID !== item?.imdbID))\r\n  }\r\n\r\n  const playlistValue = {\r\n    playlist,\r\n    addToPlaylist,\r\n    removeFromPlaylist\r\n  };\r\n\r\n  return (\r\n    <PlaylistContext.Provider value={playlistValue}>\r\n      {children}\r\n    </PlaylistContext.Provider>\r\n  );\r\n}\r\n\r\nexport default PlaylistProvider;\r\n\r\nexport const usePlaylistContext = () => useContext(PlaylistContext);\r\n","const PlayListItem = ({ item, removeItem }) => {\r\n   const { Title, Poster, Actors } = item;\r\n   return (\r\n      <div className=\"playlist-item\">\r\n         <div className=\"poster-img\">{Poster !== 'N/A' ? <img src={Poster} alt={`${Title} Poster`} /> : <span>No Poster Available</span>}</div>\r\n         <div className=\"details\">\r\n            <div className=\"detail-title\">{Title}</div>\r\n            <div className=\"detail-actors\">Starring: {Actors}</div>\r\n            <div className=\"cta\">\r\n               <button type=\"button\" onClick={() => removeItem()}>[x] Remove from playlist</button>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default PlayListItem;","// Context.\nimport { usePlaylistContext } from '../../context/PlaylistContext';\n// Component. \nimport PlayListItem from './PlayListItem';\n// Style.\nimport './PlaylistContent.scss';\n\n// Constant.\nconst favColor = '#ADD8E6'\n\nconst PlaylistContent = () => {\n  const { playlist, removeFromPlaylist } = usePlaylistContext();\n  const removeItem = (item) => { removeFromPlaylist(item) }\n  return (\n    <div className=\"scrollable-area playlist\">\n      <div className=\"playlist-content\">\n        <div className=\"playlist-grid\">\n          {!playlist.length ? <p>Nothing in your playlist mate</p> :\n            <>\n              {playlist.map(m => <PlayListItem item={m} removeItem={() => removeItem(m)} />)}\n            </>\n          }\n        </div>\n      </div>\n      <footer style={{ background: favColor }}>My favorite color is {favColor}</footer>\n    </div>)\n}\n\nexport default PlaylistContent;\n","import { createContext, useContext, useState } from 'react';\r\nexport const ResultContext = createContext({});\r\n\r\nconst ResultProvider = ({ children }) => {\r\n  const [searchResult, setSearchResult] = useState({});\r\n\r\n  const resultsContent = {\r\n    searchResult,\r\n    setSearchResult,\r\n\r\n  };\r\n\r\n  return (\r\n    <ResultContext.Provider value={resultsContent}>\r\n      {children}\r\n    </ResultContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ResultProvider;\r\n\r\nexport const useResultContext = () => useContext(ResultContext);\r\n","import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL:\r\n    \"https://www.omdbapi.com/?apikey=f7b09770\"\r\n});\r\n\r\n\r\nconst fetchApi = {\r\n  get: (path, params, header, options = {}) => {\r\n    return axiosInstance.get(`${path}`, { params: params, ...options }, header);\r\n  }\r\n};\r\n\r\nconst apiQuery = async (type, path, query, header) => {\r\n  let data, error;\r\n  try {\r\n    let resp = await fetchApi[type](path, query, header);\r\n    data = resp.data ? resp.data : resp;\r\n  } catch (err) {\r\n    error = err;\r\n  }\r\n  return { data, error };\r\n};\r\n\r\nexport const getTitle = async (obj) => {\r\n  return await apiQuery('get', '', obj);\r\n};","// Module.\nimport { useRef } from 'react'\n// Util.\nimport { getTitle } from '../../utils/apiQuery'\n// Context.\nimport { useResultContext } from '../../context/ResultContext'\n\nconst Search = () => {\n  const inputRef = useRef(null);\n  const { setSearchResult } = useResultContext();\n\n  const searchTitle = async (text) => {\n    const { data } = await getTitle({ t: text })\n    if (data) {\n      setSearchResult(data)\n    }\n  }\n\n  const onSubmit = (ev) => {\n    ev.preventDefault();\n    searchTitle(inputRef.current?.value || '')\n  }\n\n  return (\n    <form onSubmit={(ev) => onSubmit(ev)}>\n      <fieldset>\n        <label>Search a title</label>\n        <input ref={inputRef} type=\"text\" name=\"title\" placeholder=\"Title\" />\n      </fieldset>\n    </form>\n  )\n}\n\nexport default Search;\n","// Module.\nimport { useMemo } from 'react'\n// Context.\nimport { useResultContext } from '../../context/ResultContext'\nimport { usePlaylistContext } from '../../context/PlaylistContext';\n\nconst Results = () => {\n  const { playlist, addToPlaylist, removeFromPlaylist } = usePlaylistContext();\n  const { searchResult } = useResultContext();\n\n  const isInPlaylist = useMemo(() => {\n    return !!(playlist.find(m => m?.imdbID === searchResult?.imdbID))\n  }, [playlist, searchResult])\n\n  const togglePlaylist = () => {\n    if (isInPlaylist) {\n      removeFromPlaylist(searchResult)\n    } else {\n      addToPlaylist(searchResult)\n    }\n  }\n\n  if (searchResult?.Error || !searchResult?.Title) return <p>{searchResult.Error}</p>\n\n  return (\n    <div className=\"results\">\n      <div className=\"poster-img\">{searchResult.Poster !== 'N/A' ? <img src={searchResult.Poster} alt={`${searchResult.Title} Poster`} /> : 'No Poster Available'}</div>\n      <div className=\"details\">\n        <div className=\"detail-title\">{searchResult.Title}</div>\n        <div className=\"detail-actors\"><span className=\"item-desc\">Starring: </span>{searchResult.Actors}</div>\n        <div className=\"detail-genre\"><span className=\"item-desc\">Genre: </span>{searchResult.Genre}</div>\n        <div className=\"detail-rate\"><span className=\"item-desc\">Rate: </span>{searchResult.Rated}</div>\n        <div className=\"detail-year\"><span className=\"item-desc\">Year: </span>{searchResult.Year}</div>\n        <div className=\"detail-plot\"><span className=\"item-desc\">Synopsis: </span>{searchResult.Plot}</div>\n        <div className=\"cta\">\n          <button type=\"button\" onClick={() => togglePlaylist()}>{isInPlaylist ? '[x] Remove from playlist' : '[+] Add to playlist'}</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Results;\n","// Context.\nimport ResultProvider from '../../context/ResultContext';\n// Component. \nimport Search from './Search';\nimport Results from './Results';\n// Style.\nimport './SearchContent.scss';\n\nconst SearchContent = () => {\n  return (\n    <div className=\"search-content\">\n      <ResultProvider>\n        <Search />\n        <div className=\"scrollable-area results-content\">\n          <Results />\n        </div>\n      </ResultProvider>\n    </div>\n  );\n}\n\nexport default SearchContent;\n","// Module.\nimport { useState } from 'react'\n// Context.\nimport PlaylistProvider from './context/PlaylistContext';\n// Component.\nimport PlaylistContent from './components/PlaylistContent';\nimport SearchContent from './components/SearchContent';\n// Style.\nimport './App.scss';\n\n\nfunction App() {\n  const [page, setPage] = useState('search')\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Movies DB</h1>\n        <nav>\n          <ul>\n            <li className={page === 'search' ? 'active' : ''} onClick={() => setPage('search')}>Search</li>\n            <li className={page === 'playlist' ? 'active' : ''} onClick={() => setPage('playlist')}>Playlist</li>\n          </ul>\n        </nav>\n      </header>\n      <PlaylistProvider>\n        <div className=\"pages\">\n          {page === 'search' ?\n            <SearchContent /> : null\n          }\n          {page === 'playlist' ?\n            <PlaylistContent /> : null\n          }\n        </div>\n      </PlaylistProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}